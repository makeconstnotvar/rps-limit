import { useEffect, useRef, useState } from 'preact/hooks';
import axios from 'axios';
import { Controls } from './components/Controls.jsx';
import StatsDisplay from './components/StatsDisplay.jsx';
import { TrafficChart } from './components/TrafficChart.jsx';
import VisualBucket from "./components/VisualBucket";

export function App() {
  const [algorithm, setAlgorithm] = useState('fixedWindow');
  const [rps, setRps] = useState(5);
  const [running, setRunning] = useState(false);
  const [stats, setStats] = useState({allowed: 0, denied: 0});
  const timer = useRef(null);
  const intervalRef = useRef(null);
  const [state, setState] = useState({});

  useEffect(() => {
    if (['fixedWindow', 'tokenBucket'].includes(algorithm)) return;

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
    }

    intervalRef.current = setInterval(async () => {
      try {
        const res = await axios.get('http://localhost:3000/api/state');
        setState(res.data);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
      }
    }, 500);

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
    };
  }, [algorithm]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
  const changeAlgorithm = async (algo) => {
    setAlgorithm(algo);
    try {
      await axios.post('http://localhost:3000/api/algorithm', {algorithm: algo});
      setStats({allowed: 0, denied: 0});
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:', error);
    }
  };

  // –ó–∞–ø—É—Å–∫ / –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
  const toggleSimulation = async () => {
    try {
      if (running) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
        await axios.post('http://localhost:3000/api/simulator', {action: 'stop'});
        if (timer.current) {
          clearInterval(timer.current);
          timer.current = null;
        }
        setRunning(false);
      } else {
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
        await axios.post('http://localhost:3000/api/simulator', {action: 'start', rps});
        timer.current = setInterval(fetchStats, 500);
        setRunning(true);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–∏–º—É–ª—è—Ü–∏–µ–π', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      if (timer.current) {
        clearInterval(timer.current);
        timer.current = null;
      }
      setRunning(false);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const fetchStats = async () => {
    try {
      const res = await axios.get('http://localhost:3000/api/stats');
      // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
      setStats({...res.data});
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', error);
    }
  };

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (timer.current) {
        clearInterval(timer.current);
      }
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
      axios.post('http://localhost:3000/api/simulator', {action: 'stop'})
        .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏–º—É–ª—è—Ü–∏–∏:', error));
    };
  }, []);

  return (
    <div style={{padding: '2rem', fontFamily: 'sans-serif'}}>
      <h1>üö¶ Rate Limiter Playground</h1>

      <Controls
        algorithm={algorithm}
        onAlgorithmChange={changeAlgorithm}
        rps={rps}
        setRps={setRps}
        running={running}
        onToggle={toggleSimulation}
      />
      <VisualBucket algorithm={algorithm} state={state}/>
      <StatsDisplay stats={stats}/>
      <TrafficChart stats={stats}/>
    </div>
  );
}