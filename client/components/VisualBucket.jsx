import { useEffect, useState } from "preact/hooks";

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç TokenRain –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
function TokenRain({ tokens, maxTokens, refillRate }) {
  const [raindrops, setRaindrops] = useState([]);
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–∞–ø–µ–ª—å –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
  useEffect(() => {
    const interval = setInterval(() => {
      if (tokens < maxTokens) {
        setRaindrops(prev => [
          ...prev, 
          { id: Date.now(), x: Math.random() * 100 }
        ]);
      }
    }, 1000 / refillRate);
    
    return () => clearInterval(interval);
  }, [tokens, maxTokens, refillRate]);
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–ø–µ–ª—å, –¥–æ—Å—Ç–∏–≥—à–∏—Ö –¥–Ω–∞
  useEffect(() => {
    const interval = setInterval(() => {
      setRaindrops(prev => prev.filter(drop => 
        Date.now() - drop.id < 1000
      ));
    }, 100);
    
    return () => clearInterval(interval);
  }, []);
  
  return (
    <div className="token-rain">
      {raindrops.map(drop => (
        <div 
          key={drop.id}
          className="token-rain__drop"
          style={{ left: `${drop.x}%` }}
        />
      ))}
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç LeakyFlow –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—ã—Ç–µ–∫–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
function LeakyFlow({ processRate }) {
  const [drops, setDrops] = useState([]);
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–∞–ø–µ–ª—å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—ã—Ç–µ–∫–∞–Ω–∏—è
  useEffect(() => {
    const interval = setInterval(() => {
      setDrops(prev => [
        ...prev,
        { id: Date.now(), progress: 0 }
      ]);
    }, 1000 / processRate);
    
    return () => clearInterval(interval);
  }, [processRate]);
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∫–∞–ø–µ–ª—å –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö
  useEffect(() => {
    const animationFrame = requestAnimationFrame(function animate() {
      setDrops(prev => 
        prev
          .map(drop => ({
            ...drop,
            progress: Math.min(100, drop.progress + 2)
          }))
          .filter(drop => drop.progress < 100)
      );
      
      requestAnimationFrame(animate);
    });
    
    return () => cancelAnimationFrame(animationFrame);
  }, []);
  
  return (
    <div className="leaky-flow">
      {drops.map(drop => (
        <div 
          key={drop.id}
          className="leaky-flow__drop"
          style={{ top: `${drop.progress}%` }}
        />
      ))}
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
function InfoTooltip({ title, content }) {
  const [visible, setVisible] = useState(false);
  
  return (
    <div className="info-tooltip">
      <button 
        className="info-tooltip__trigger"
        onMouseEnter={() => setVisible(true)}
        onMouseLeave={() => setVisible(false)}
      >
        ‚ÑπÔ∏è
      </button>
      
      {visible && (
        <div className="info-tooltip__content">
          <h5>{title}</h5>
          <p>{content}</p>
        </div>
      )}
    </div>
  );
}

export function VisualBucket({ algorithm, state, rpsLimit }) {
  // –û–±—â–∏–π –≤—Ä–∞–ø–ø–µ—Ä –¥–ª—è –≤—Å–µ—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
  const VisualizerWrapper = ({ title, description, children }) => (
    <div className="visual-bucket">
      <div className="visual-bucket__header">
        <h3 className="visual-bucket__title">{title}</h3>
        {description && (
          <InfoTooltip
            title={title}
            content={description}
          />
        )}
      </div>
      {children}
    </div>
  );

  // Fixed Window
  if (algorithm === 'fixedWindow') {
    const { windowStart, count, windowSize } = state.fixedWindow;
    const now = Date.now();
    const elapsed = now - windowStart;
    const timeLeft = Math.max(0, windowSize - elapsed);
    const progress = (elapsed / windowSize) * 100;
    const isOverLimit = count > rpsLimit;

    return (
      <VisualizerWrapper 
        title="ü™ü Fixed Window" 
        description="–ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Å—á–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ. –ü—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –æ–∫–Ω–∞ —Å—á–µ—Ç—á–∏–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è."
      >
        <div className="visual-bucket__fixed-window">
          <div className="visual-bucket__window-container">
            <div 
              className="visual-bucket__progress-bar"
              style={{ width: `${progress}%` }}
            />
            <div className={`visual-bucket__counter ${isOverLimit ? 'visual-bucket__counter--over' : ''}`}>
              {count} / {rpsLimit}
            </div>
          </div>
          <p className="visual-bucket__timer">–°–±—Ä–æ—Å —á–µ—Ä–µ–∑: {Math.ceil(timeLeft / 1000)}—Å</p>
        </div>
      </VisualizerWrapper>
    );
  }

  // Sliding Log
  if (algorithm === 'slidingLog') {
    const { timestamps, windowSize } = state.slidingLog;
    const now = Date.now();
    const isOverLimit = timestamps.length > rpsLimit;
    
    return (
      <VisualizerWrapper 
        title="üìú Sliding Log" 
        description="–•—Ä–∞–Ω–∏—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–∫–æ–ª—å–∑—è—â–µ–º –æ–∫–Ω–µ. –°—Ç–∞—Ä—ã–µ –º–µ—Ç–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ –º–µ—Ä–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ–∫–Ω–∞."
      >
        <div className="visual-bucket__sliding-log">
          <div className="visual-bucket__log-container">
            {timestamps.map((ts, i) => {
              const age = now - ts;
              const percent = 100 - (age / windowSize) * 100;
              return (
                <div
                  key={i}
                  className="visual-bucket__log-mark"
                  style={{ left: `${percent}%` }}
                />
              );
            })}
            <div 
              className="visual-bucket__limit-line" 
              style={{ right: `${rpsLimit * 5}px` }}
            />
          </div>
          <p className={`visual-bucket__status ${isOverLimit ? 'visual-bucket__status--over' : ''}`}>
            {timestamps.length} / {rpsLimit} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ–∫–Ω–µ
          </p>
        </div>
      </VisualizerWrapper>
    );
  }

  // Sliding Counter
  if (algorithm === 'slidingCounter') {
    const { buckets, bucketSize, windowSize } = state.slidingCounter;
    const maxCount = Math.max(...buckets.map(b => b.count || 0), 1);
    const totalCount = buckets.reduce((sum, b) => sum + (b.count || 0), 0);
    const isOverLimit = totalCount > rpsLimit;
    const now = Date.now();
    const currentBucket = Math.floor(now / bucketSize);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∫–µ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
    const sortedBuckets = [...buckets].sort((a, b) => a.id - b.id);
    
    return (
      <VisualizerWrapper 
        title="üß± Sliding Counter" 
        description="–†–∞–∑–±–∏–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã (–±–∞–∫–µ—Ç—ã) –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –≤ –∫–∞–∂–¥–æ–º. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ - —Å—É–º–º–∞ –ø–æ –≤—Å–µ–º –±–∞–∫–µ—Ç–∞–º –≤ –æ–∫–Ω–µ."
      >
        <div className="visual-bucket__counter-wrapper">
          <div className="visual-bucket__counter-container">
            {sortedBuckets.map((b, i) => {
              const age = (currentBucket - b.id) * bucketSize;
              const agePercent = (age / windowSize) * 100;
              return (
                <div
                  key={i}
                  className="visual-bucket__counter-column"
                  style={{ opacity: 1 - agePercent / 100 }}
                >
                  <div
                    className="visual-bucket__counter-item"
                    style={{ height: `${(b.count / maxCount) * 100}%` }}
                  >
                    {b.count || 0}
                  </div>
                  <div className="visual-bucket__counter-label">
                    {Math.floor(age / 100) / 10}s
                  </div>
                </div>
              );
            })}
          </div>
          <div className="visual-bucket__counter-total">
            <span className={isOverLimit ? 'visual-bucket__counter--over' : ''}>
              –í—Å–µ–≥–æ: {totalCount} / {rpsLimit}
            </span>
          </div>
        </div>
      </VisualizerWrapper>
    );
  }

  // Token Bucket
  if (algorithm === 'tokenBucket') {
    const { tokens, maxTokens, refillRate } = state.tokenBucket;
    const filledPercent = (tokens / maxTokens) * 100;
    const isLow = tokens < maxTokens * 0.3;

    return (
      <VisualizerWrapper 
        title="üéüÔ∏è Token Bucket" 
        description="–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ç–æ–∫–µ–Ω–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–æ–ª–Ω—è—é—Ç—Å—è —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é. –ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ—Ç, –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è."
      >
        <div className="visual-bucket__token-wrapper">
          <TokenRain 
            tokens={tokens} 
            maxTokens={maxTokens} 
            refillRate={refillRate} 
          />
          <div className="visual-bucket__token-container">
            <div
              className={`visual-bucket__token-level ${isLow ? 'visual-bucket__token-level--low' : ''}`}
              style={{ height: `${filledPercent}%` }}
            />
          </div>
          <div className="visual-bucket__token-info">
            <p className="visual-bucket__status">
              {tokens} / {maxTokens} —Ç–æ–∫–µ–Ω–æ–≤
            </p>
            <p className="visual-bucket__refill-rate">
              –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {refillRate} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫
            </p>
          </div>
        </div>
      </VisualizerWrapper>
    );
  }

  // Leaky Bucket
  if (algorithm === 'leakyBucket') {
    const { queue, maxSize, processRate } = state.leakyBucket;
    const queueSize = queue.length;
    const fillPercent = (queueSize / maxSize) * 100;
    const isNearFull = queueSize > maxSize * 0.7;

    return (
      <VisualizerWrapper 
        title="üíß Leaky Bucket" 
        description="–û—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ù–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞. –ó–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é."
      >
        <div className="visual-bucket__leaky-wrapper">
          <div className="visual-bucket__leaky-container">
            <div 
              className={`visual-bucket__leaky-level ${isNearFull ? 'visual-bucket__leaky-level--full' : ''}`}
              style={{ height: `${fillPercent}%` }}
            />
            <LeakyFlow processRate={processRate} />
          </div>
          <div className="visual-bucket__leaky-info">
            <p className="visual-bucket__status">
              {queueSize} / {maxSize} –≤ –æ—á–µ—Ä–µ–¥–∏
            </p>
            <p className="visual-bucket__process-rate">
              –û–±—Ä–∞–±–æ—Ç–∫–∞: {processRate} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫
            </p>
          </div>
        </div>
      </VisualizerWrapper>
    );
  }

  return (
    <div className="visual-bucket">
      <h3 className="visual-bucket__title">–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</h3>
    </div>
  );
}
