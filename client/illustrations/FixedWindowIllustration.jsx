import { useEffect, useRef, useState } from 'preact/hooks';

export function FixedWindowIllustration({ rpsLimit, rps, running, algorithmState }) {
  const canvasRef = useRef(null);
  const [requests, setRequests] = useState([]);
  const animationFrameRef = useRef(null);

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const WINDOW_DURATION = 10000; // 10 —Å–µ–∫—É–Ω–¥
  const BALL_RADIUS = 10;
  const CONTAINER_HEIGHT = 150;
  const CONTAINER_PADDING = 40;

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  useEffect(() => {
    if (!running) return;

    const interval = setInterval(() => {
      const now = Date.now();

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞
      const count = algorithmState && 'count' in algorithmState
        ? algorithmState.count
        : 0;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—É–¥–µ—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç
      const accepted = count < rpsLimit;

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–æ —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π –ø–æ X
      setRequests(prev => [
        ...prev,
        {
          id: now,
          x: Math.random() * 0.8 + 0.1, // –ü–æ–∑–∏—Ü–∏—è –ø–æ X (–æ—Ç 0.1 –¥–æ 0.9)
          y: -BALL_RADIUS * 2, // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞–¥ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ–π —Ö–æ–ª—Å—Ç–∞
          velocity: 2, // –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–∞–¥–µ–Ω–∏—è
          accepted,
          created: now
        }
      ]);
    }, 10000 / rps);

    return () => clearInterval(interval);
  }, [running, rps, rpsLimit, algorithmState]);

  // –ê–Ω–∏–º–∞—Ü–∏—è
  useEffect(() => {
    if (!canvasRef.current) return;

    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    const gravity = 0.3; // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–∞–¥–µ–Ω–∏—è

    function animate() {
      const now = Date.now();

      // –û—á–∏—â–∞–µ–º —Ö–æ–ª—Å—Ç
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // –†–∏—Å—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      const containerWidth = canvas.width - 2 * CONTAINER_PADDING;
      const containerTop = canvas.height - CONTAINER_HEIGHT - CONTAINER_PADDING;

      ctx.strokeStyle = '#333';
      ctx.lineWidth = 2;
      ctx.strokeRect(
        CONTAINER_PADDING,
        containerTop,
        containerWidth,
        CONTAINER_HEIGHT
      );

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞
      const windowStart = algorithmState && 'windowStart' in algorithmState
        ? algorithmState.windowStart
        : now;
      const count = algorithmState && 'count' in algorithmState
        ? algorithmState.count
        : 0;

      // –†–∏—Å—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–∫–Ω–∞
      const elapsed = now - windowStart;
      const progress = Math.min(1, elapsed / WINDOW_DURATION);

      ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
      ctx.fillRect(
        CONTAINER_PADDING,
        containerTop,
        containerWidth * progress,
        CONTAINER_HEIGHT
      );

      // –†–∏—Å—É–µ–º —Å—á–µ—Ç—á–∏–∫
      ctx.fillStyle = count >= rpsLimit ? 'red' : '#333';
      ctx.font = 'bold 16px Arial';
      ctx.textAlign = 'center';
      ctx.fillText(
        `${count} / ${rpsLimit}`,
        canvas.width / 2,
        containerTop + CONTAINER_HEIGHT / 2
      );

      // –†–∏—Å—É–µ–º —Ç–∞–π–º–µ—Ä
      const timeLeft = Math.max(0, WINDOW_DURATION - elapsed);
      ctx.fillStyle = '#666';
      ctx.font = '14px Arial';
      ctx.fillText(
        `–°–±—Ä–æ—Å —á–µ—Ä–µ–∑: ${(timeLeft / 1000).toFixed(1)}—Å`,
        canvas.width / 2,
        containerTop + CONTAINER_HEIGHT + 30
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Ä–∏—Å—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
      setRequests(prev =>
        prev
          .map(req => {
            // –§–∏–∑–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è
            let { x, y, velocity, accepted } = req;

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
            const absX = CONTAINER_PADDING + x * containerWidth;

            // –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è Y –¥–ª—è –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–µ–∫—Å–∞ –∑–∞–ø—Ä–æ—Å–∞, –∞ –Ω–µ –æ–±—â–µ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
            // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ —Å–≤–æ–µ–π –ø–æ–∑–∏—Ü–∏–∏
            const acceptedRequests = prev.filter(r => r.accepted).length;
            const rowCapacity = Math.floor(containerWidth / (BALL_RADIUS * 3));
            const index = acceptedRequests % (rowCapacity * 4); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 4 —Ä—è–¥–∞–º–∏ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏

            const row = Math.floor(index / rowCapacity);
            const col = index % rowCapacity;

            const acceptedTargetY = containerTop + BALL_RADIUS * 2 + row * BALL_RADIUS * 3;
            const acceptedTargetX = CONTAINER_PADDING + BALL_RADIUS * 2 + col * BALL_RADIUS * 3;

            // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –∏ –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ Y, —Ñ–∏–∫—Å–∏—Ä—É–µ–º –µ–≥–æ
            if (accepted && y >= acceptedTargetY) {
              // –î–ª—è –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑–º–µ–Ω—è–µ–º —Ç–∞–∫–∂–µ X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É, —á—Ç–æ–±—ã –≤—ã—Å—Ç—Ä–æ–∏—Ç—å –∏—Ö –≤ —Ä—è–¥—ã
              const newX = (acceptedTargetX - CONTAINER_PADDING) / containerWidth;
              return {
                ...req,
                y: acceptedTargetY,
                x: newX,
                velocity: 0
              };
            }

            // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ –¥–æ—Å—Ç–∏–≥ –≤–µ—Ä—Ö–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –æ—Ç—Å–∫–∞–∫–∏–≤–∞–µ–º
            if (!accepted && y >= containerTop - BALL_RADIUS) {
              // –ï—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è –æ—Ç—Å–∫–æ–∫–∞, —É–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
              if (Math.abs(velocity) < 1) {
                return null;
              }

              return {
                ...req,
                y: containerTop - BALL_RADIUS,
                velocity: -velocity * 0.7 // –û—Ç—Å–∫–æ–∫ —Å –ø–æ—Ç–µ—Ä–µ–π —ç–Ω–µ—Ä–≥–∏–∏
              };
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é
            velocity += gravity;
            y += velocity;

            return { ...req, y, velocity };
          })
          .filter(Boolean) // –£–¥–∞–ª—è–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è
          .filter(req => {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Å—Ç–∞—Ä—à–µ 5 —Å–µ–∫—É–Ω–¥) –∏ –≤—ã–ª–µ—Ç–µ–≤—à–∏–µ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞
            return now - req.created < 5000 && req.y < canvas.height + BALL_RADIUS;
          })
      );

      // –†–∏—Å—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
      requests.forEach(req => {
        const absX = CONTAINER_PADDING + req.x * containerWidth;

        ctx.beginPath();
        ctx.arc(absX, req.y, BALL_RADIUS, 0, Math.PI * 2);
        ctx.fillStyle = req.accepted ? 'limegreen' : 'tomato';
        ctx.fill();
        ctx.strokeStyle = '#333';
        ctx.lineWidth = 1;
        ctx.stroke();
        ctx.closePath();
      });

      animationFrameRef.current = requestAnimationFrame(animate);
    }


    animate();

    return () => {
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
      }
    };
  }, [requests, algorithmState, rpsLimit]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ö–æ–ª—Å—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
  useEffect(() => {
    function handleResize() {
      if (canvasRef.current) {
        const canvas = canvasRef.current;
        const container = canvas.parentElement;
        canvas.width = container.clientWidth;
        canvas.height = 300;
      }
    }

    window.addEventListener('resize', handleResize);
    handleResize();

    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return (
    <div className="illustration">
      <h3 className="illustration__title">ü™ü Fixed Window</h3>
      <div className="illustration__canvas-container">
        <canvas ref={canvasRef} className="illustration__canvas" />
      </div>
      <p className="illustration__description">
        –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Å—á–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ.
        –ü—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –æ–∫–Ω–∞ —Å—á–µ—Ç—á–∏–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è.
      </p>
    </div>
  );
}