import { useEffect, useRef, useState } from 'preact/hooks';

export function FixedWindowIllustration({ rpsLimit, rps, running, algorithmState }) {
  const canvasRef = useRef(null);
  const [requests, setRequests] = useState([]);
  const animationFrameRef = useRef(null);
  const lastRequestTimeRef = useRef(0);

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const WINDOW_DURATION = 10000; // 10 —Å–µ–∫—É–Ω–¥ (WINDOW_SIZE)
  const BALL_RADIUS = 10;
  const CONTAINER_HEIGHT = 50; // –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –ø–æ–ª–æ—Å—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const CONTAINER_PADDING = 20;

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  useEffect(() => {
    if (!running) return;

    const interval = setInterval(() => {
      const now = Date.now();
      lastRequestTimeRef.current = now;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—É–¥–µ—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç
      const accepted = algorithmState.count < rpsLimit;

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      setRequests(prev => [
        ...prev,
        {
          id: now,
          x: Math.random() * 0.8 + 0.1, // –ü–æ–∑–∏—Ü–∏—è –ø–æ X (–æ—Ç 0.1 –¥–æ 0.9)
          y: 0, // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ Y
          velocity: 0, // –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
          accepted,
          created: now
        }
      ]);
    }, 1000 / rps);

    return () => clearInterval(interval);
  }, [running, rps, rpsLimit, algorithmState]);

  // –ê–Ω–∏–º–∞—Ü–∏—è
  useEffect(() => {
    if (!canvasRef.current) return;

    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    const gravity = 0.5; // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–∞–¥–µ–Ω–∏—è

    function animate() {
      const now = Date.now();

      // –û—á–∏—â–∞–µ–º —Ö–æ–ª—Å—Ç
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // –†–∏—Å—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      const containerWidth = canvas.width - 2 * CONTAINER_PADDING;
      const containerTop = canvas.height - CONTAINER_HEIGHT - CONTAINER_PADDING;

      ctx.strokeStyle = '#333';
      ctx.lineWidth = 2;
      ctx.strokeRect(
        CONTAINER_PADDING,
        containerTop,
        containerWidth,
        CONTAINER_HEIGHT
      );

      // –†–∏—Å—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–∫–Ω–∞
      const elapsed = now - algorithmState.windowStart;
      const progress = Math.min(1, elapsed / WINDOW_DURATION);

      ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
      ctx.fillRect(
        CONTAINER_PADDING,
        containerTop,
        containerWidth * progress,
        CONTAINER_HEIGHT
      );

      // –†–∏—Å—É–µ–º —Å—á–µ—Ç—á–∏–∫
      ctx.fillStyle = algorithmState.count > rpsLimit ? 'red' : '#333';
      ctx.font = 'bold 16px Arial';
      ctx.textAlign = 'center';
      ctx.fillText(
        `${algorithmState.count} / ${rpsLimit}`,
        canvas.width / 2,
        containerTop + CONTAINER_HEIGHT / 2
      );

      // –†–∏—Å—É–µ–º —Ç–∞–π–º–µ—Ä
      const timeLeft = Math.max(0, WINDOW_DURATION - elapsed);
      ctx.fillStyle = '#666';
      ctx.font = '14px Arial';
      ctx.fillText(
        `–°–±—Ä–æ—Å —á–µ—Ä–µ–∑: ${(timeLeft / 1000).toFixed(1)}—Å`,
        canvas.width / 2,
        containerTop + CONTAINER_HEIGHT + 20
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Ä–∏—Å—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
      const updatedRequests = requests
          .map(req => {
            // –§–∏–∑–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è
            let { x, y, velocity, accepted } = req;

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
            const absX = CONTAINER_PADDING + x * containerWidth;

            // –ü–æ–∑–∏—Ü–∏—è –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            const containerY = containerTop - BALL_RADIUS;

            // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –∏ –¥–æ—Å—Ç–∏–≥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ –æ–∫–Ω–æ
            if (accepted && y >= containerY) {
              // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–ª–µ—Ç–∞ –≤–Ω–∏–∑
              return { ...req, velocity: velocity + 1 };
            }

            // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ –¥–æ—Å—Ç–∏–≥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
            if (!accepted && y >= containerY) {
              return {
                ...req,
                y: containerY,
                velocity: 0 // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —É –æ–∫–Ω–∞
              };
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é
            velocity += gravity;
            y += velocity;

            return { ...req, y, velocity };
          })
          .filter(req => {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã:
            // - –ü—Ä–∏–Ω—è—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            // - –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ–∫–Ω–∞
            if (req.accepted) {
              return now - req.created < 3000;
            } else {
              // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ –¥–æ—Å—Ç–∏–≥ –æ–∫–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
              const hasReachedWindow = req.y >= containerTop - BALL_RADIUS && req.velocity === 0;
              return !hasReachedWindow || now - req.created < 1500;
            }
          });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setRequests(updatedRequests);

      // –†–∏—Å—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
      updatedRequests.forEach(req => {
        const absX = CONTAINER_PADDING + req.x * containerWidth;

        ctx.beginPath();
        ctx.arc(absX, req.y, BALL_RADIUS, 0, Math.PI * 2);
        ctx.fillStyle = req.accepted ? 'limegreen' : 'tomato';
        ctx.fill();
        ctx.closePath();
      });

      animationFrameRef.current = requestAnimationFrame(animate);
    }

    animate();

    return () => {
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
      }
    };
  }, [requests, algorithmState, rpsLimit]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ö–æ–ª—Å—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
  useEffect(() => {
    function handleResize() {
      if (canvasRef.current) {
        const canvas = canvasRef.current;
        const container = canvas.parentElement;
        canvas.width = container.clientWidth;
        canvas.height = 300;
      }
    }

    window.addEventListener('resize', handleResize);
    handleResize();

    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return (
    <div className="illustration">
      <h3 className="illustration__title">ü™ü Fixed Window</h3>
      <div className="illustration__canvas-container">
        <canvas ref={canvasRef} className="illustration__canvas" />
      </div>
      <p className="illustration__description">
        –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Å—á–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ.
        –ü—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –æ–∫–Ω–∞ —Å—á–µ—Ç—á–∏–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è.
      </p>
    </div>
  );
}
