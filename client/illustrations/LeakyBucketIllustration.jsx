import { useEffect, useRef, useState } from 'preact/hooks';

export function LeakyBucketIllustration({ rpsLimit, rps, running }) {
  const canvasRef = useRef(null);
  const [requests, setRequests] = useState([]);
  const [queue, setQueue] = useState([]);
  const [leakingDrops, setLeakingDrops] = useState([]);
  const animationFrameRef = useRef(null);
  const lastLeakTimeRef = useRef(Date.now());
  
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const BALL_RADIUS = 10;
  const BUCKET_WIDTH = 120;
  const BUCKET_HEIGHT = 180;
  const CONTAINER_PADDING = 20;
  const PROCESS_RATE = rpsLimit; // –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ä–∞–≤–Ω–∞ –ª–∏–º–∏—Ç—É)
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
  useEffect(() => {
    if (!running) return;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ (—É—Ç–µ—á–∫–∞)
    const leakInterval = setInterval(() => {
      const now = Date.now();
      const elapsedSec = (now - lastLeakTimeRef.current) / 1000;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
      if (queue.length > 0) {
        // –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ –Ω–∞—á–∞–ª–∞ –æ—á–µ—Ä–µ–¥–∏ (FIFO)
        setQueue(prev => {
          if (prev.length === 0) return prev;
          return prev.slice(1);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —É—Ç–µ–∫–∞—é—â–µ–π –∫–∞–ø–ª–∏
        setLeakingDrops(prev => [
          ...prev,
          {
            id: now,
            created: now
          }
        ]);
      }
      
      lastLeakTimeRef.current = now;
    }, 1000 / PROCESS_RATE);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    const requestInterval = setInterval(() => {
      const now = Date.now();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—É–¥–µ—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç
      const accepted = queue.length < rpsLimit;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      setRequests(prev => [
        ...prev,
        {
          id: now,
          x: Math.random() * 0.8 + 0.1, // –ü–æ–∑–∏—Ü–∏—è –ø–æ X (–æ—Ç 0.1 –¥–æ 0.9)
          y: 0, // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ Y
          velocity: 0, // –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
          accepted,
          created: now
        }
      ]);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏–Ω—è—Ç
      if (accepted) {
        setQueue(prev => [...prev, { id: now }]);
      }
    }, 1000 / rps);
    
    return () => {
      clearInterval(leakInterval);
      clearInterval(requestInterval);
    };
  }, [running, rps, rpsLimit, queue.length]);
  
  // –ê–Ω–∏–º–∞—Ü–∏—è
  useEffect(() => {
    if (!canvasRef.current) return;
    
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    const gravity = 0.5; // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–∞–¥–µ–Ω–∏—è
    
    function animate() {
      const now = Date.now();
      
      // –û—á–∏—â–∞–µ–º —Ö–æ–ª—Å—Ç
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      // –†–∏—Å—É–µ–º –≤–µ–¥—Ä–æ (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä)
      const bucketX = (canvas.width - BUCKET_WIDTH) / 2;
      const bucketY = canvas.height - BUCKET_HEIGHT - CONTAINER_PADDING;
      
      // –†–∏—Å—É–µ–º –∫–æ–Ω—Ç—É—Ä –≤–µ–¥—Ä–∞
      ctx.strokeStyle = '#333';
      ctx.lineWidth = 2;
      ctx.beginPath();
      ctx.moveTo(bucketX, bucketY);
      ctx.lineTo(bucketX, bucketY + BUCKET_HEIGHT);
      ctx.lineTo(bucketX + BUCKET_WIDTH, bucketY + BUCKET_HEIGHT);
      ctx.lineTo(bucketX + BUCKET_WIDTH, bucketY);
      ctx.stroke();
      
      // –†–∏—Å—É–µ–º –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ –≤ –¥–Ω–µ –≤–µ–¥—Ä–∞
      ctx.fillStyle = '#f5f5f5';
      const holeWidth = 20;
      const holeHeight = 10;
      ctx.fillRect(
        bucketX + (BUCKET_WIDTH - holeWidth) / 2, 
        bucketY + BUCKET_HEIGHT - holeHeight / 2, 
        holeWidth, 
        holeHeight
      );
      
      // –†–∏—Å—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –≤ –æ—á–µ—Ä–µ–¥–∏
      const queueHeight = (queue.length / rpsLimit) * BUCKET_HEIGHT;
      
      if (queueHeight > 0) {
        // –†–∏—Å—É–µ–º "–∂–∏–¥–∫–æ—Å—Ç—å" –≤ –≤–µ–¥—Ä–µ
        ctx.fillStyle = queue.length > rpsLimit * 0.7 ? '#ff5722' : 'dodgerblue';
        ctx.fillRect(
          bucketX, 
          bucketY + BUCKET_HEIGHT - queueHeight, 
          BUCKET_WIDTH, 
          queueHeight
        );
      }
      
      // –†–∏—Å—É–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏
      ctx.fillStyle = queue.length === rpsLimit ? 'red' : '#333';
      ctx.font = 'bold 16px Arial';
      ctx.textAlign = 'center';
      ctx.fillText(
        `${queue.length} / ${rpsLimit} –≤ –æ—á–µ—Ä–µ–¥–∏`,
        canvas.width / 2,
        bucketY + BUCKET_HEIGHT + 30
      );
      
      // –†–∏—Å—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
      ctx.fillStyle = '#666';
      ctx.font = '14px Arial';
      ctx.fillText(
        `–û–±—Ä–∞–±–æ—Ç–∫–∞: ${PROCESS_RATE} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫`,
        canvas.width / 2,
        bucketY + BUCKET_HEIGHT + 50
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Ä–∏—Å—É–µ–º —É—Ç–µ–∫–∞—é—â–∏–µ –∫–∞–ø–ª–∏
      setLeakingDrops(prev => 
        prev
          .map(drop => {
            // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏ (–æ—Ç 0 –¥–æ 1)
            const age = now - drop.created;
            const progress = Math.min(1, age / 500); // 500 –º—Å –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—é
            
            return { ...drop, progress };
          })
          .filter(drop => drop.progress < 1) // –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
      );
      
      // –†–∏—Å—É–µ–º —É—Ç–µ–∫–∞—é—â–∏–µ –∫–∞–ø–ª–∏
      leakingDrops.forEach(drop => {
        const dropX = bucketX + BUCKET_WIDTH / 2;
        const dropY = bucketY + BUCKET_HEIGHT + drop.progress * 30;
        
        ctx.beginPath();
        ctx.arc(dropX, dropY, 5, 0, Math.PI * 2);
        ctx.fillStyle = 'dodgerblue';
        ctx.fill();
        ctx.closePath();
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Ä–∏—Å—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
      setRequests(prev => 
        prev
          .map(req => {
            // –§–∏–∑–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è
            let { x, y, velocity, accepted } = req;
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
            const absX = bucketX + x * BUCKET_WIDTH;
            
            // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –∏ –¥–æ—Å—Ç–∏–≥ –≤–µ—Ä—Ö–∞ –≤–µ–¥—Ä–∞ –∏–ª–∏ —É—Ä–æ–≤–Ω—è –∂–∏–¥–∫–æ—Å—Ç–∏
            const liquidLevel = bucketY + BUCKET_HEIGHT - queueHeight;
            const targetY = Math.max(bucketY, liquidLevel) - BALL_RADIUS;
            
            if (accepted && y >= targetY) {
              return null; // –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –ø—Ä–∏–Ω—è—Ç –∏ –¥–æ—Å—Ç–∏–≥ –≤–µ–¥—Ä–∞
            }
            
            // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ –¥–æ—Å—Ç–∏–≥ –≤–µ—Ä—Ö–∞ –≤–µ–¥—Ä–∞, –æ—Ç—Å–∫–∞–∫–∏–≤–∞–µ–º
            if (!accepted && y >= bucketY - BALL_RADIUS) {
              return { 
                ...req, 
                y: bucketY - BALL_RADIUS, 
                velocity: -velocity * 0.6 // –û—Ç—Å–∫–æ–∫ —Å –ø–æ—Ç–µ—Ä–µ–π —ç–Ω–µ—Ä–≥–∏–∏
              };
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é
            velocity += gravity;
            y += velocity;
            
            return { ...req, y, velocity };
          })
          .filter(Boolean) // –£–¥–∞–ª—è–µ–º null (–ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –¥–æ—Å—Ç–∏–≥—à–∏–µ –≤–µ–¥—Ä–∞)
          .filter(req => {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Å—Ç–∞—Ä—à–µ 3 —Å–µ–∫—É–Ω–¥)
            return now - req.created < 3000;
          })
      );
      
      // –†–∏—Å—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
      requests.forEach(req => {
        const absX = bucketX + req.x * BUCKET_WIDTH;
        
        ctx.beginPath();
        ctx.arc(absX, req.y, BALL_RADIUS, 0, Math.PI * 2);
        ctx.fillStyle = req.accepted ? 'limegreen' : 'tomato';
        ctx.fill();
        ctx.closePath();
      });
      
      animationFrameRef.current = requestAnimationFrame(animate);
    }
    
    animate();
    
    return () => {
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
      }
    };
  }, [requests, leakingDrops, queue, rpsLimit]);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ö–æ–ª—Å—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
  useEffect(() => {
    function handleResize() {
      if (canvasRef.current) {
        const canvas = canvasRef.current;
        const container = canvas.parentElement;
        canvas.width = container.clientWidth;
        canvas.height = 300;
      }
    }
    
    window.addEventListener('resize', handleResize);
    handleResize();
    
    return () => window.removeEventListener('resize', handleResize);
  }, []);
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
  useEffect(() => {
    setQueue([]);
  }, [rpsLimit]);
  
  return (
    <div className="illustration">
      <h3 className="illustration__title">üíß Leaky Bucket</h3>
      <div className="illustration__canvas-container">
        <canvas ref={canvasRef} className="illustration__canvas" />
      </div>
      <p className="illustration__description">
        –û—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∫–∏. 
        –ù–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞. 
        –ó–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é.
      </p>
    </div>
  );
}
