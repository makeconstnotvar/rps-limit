import { useEffect, useRef, useState } from 'preact/hooks';

export function TokenBucketIllustration({ rpsLimit, rps, running }) {
  const canvasRef = useRef(null);
  const [requests, setRequests] = useState([]);
  const [tokens, setTokens] = useState(rpsLimit);
  const [refillTokens, setRefillTokens] = useState([]);
  const animationFrameRef = useRef(null);
  const lastRefillTimeRef = useRef(Date.now());
  
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const BALL_RADIUS = 10;
  const TOKEN_RADIUS = 8;
  const BUCKET_WIDTH = 120;
  const BUCKET_HEIGHT = 180;
  const CONTAINER_PADDING = 20;
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
  useEffect(() => {
    if (!running) return;
    
    // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    const refillInterval = setInterval(() => {
      const now = Date.now();
      const elapsedSec = (now - lastRefillTimeRef.current) / 1000;
      
      // –ü–æ–ø–æ–ª–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
      if (tokens < rpsLimit) {
        setTokens(prev => Math.min(rpsLimit, prev + 1));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–∞–¥–∞—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
        setRefillTokens(prev => [
          ...prev,
          {
            id: now,
            x: Math.random() * 0.8 + 0.1, // –ü–æ–∑–∏—Ü–∏—è –ø–æ X (–æ—Ç 0.1 –¥–æ 0.9)
            y: -TOKEN_RADIUS, // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ Y (–Ω–∞–¥ –≤–µ–¥—Ä–æ–º)
            velocity: 0, // –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
            created: now
          }
        ]);
      }
      
      lastRefillTimeRef.current = now;
    }, 1000 / rpsLimit); // –ü–æ–ø–æ–ª–Ω—è–µ–º —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é –ª–∏–º–∏—Ç–∞
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    const requestInterval = setInterval(() => {
      const now = Date.now();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—É–¥–µ—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç
      const accepted = tokens > 0;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      setRequests(prev => [
        ...prev,
        {
          id: now,
          x: Math.random() * 0.8 + 0.1, // –ü–æ–∑–∏—Ü–∏—è –ø–æ X (–æ—Ç 0.1 –¥–æ 0.9)
          y: 0, // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ Y
          velocity: 0, // –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
          accepted,
          created: now
        }
      ]);
      
      // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
      if (accepted) {
        setTokens(prev => Math.max(0, prev - 1));
      }
    }, 10000 / rps);
    
    return () => {
      clearInterval(refillInterval);
      clearInterval(requestInterval);
    };
  }, [running, rps, rpsLimit, tokens]);
  
  // –ê–Ω–∏–º–∞—Ü–∏—è
  useEffect(() => {
    if (!canvasRef.current) return;
    
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    const gravity = 0.5; // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–∞–¥–µ–Ω–∏—è
    
    function animate() {
      const now = Date.now();
      
      // –û—á–∏—â–∞–µ–º —Ö–æ–ª—Å—Ç
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      // –†–∏—Å—É–µ–º –≤–µ–¥—Ä–æ (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä)
      const bucketX = (canvas.width - BUCKET_WIDTH) / 2;
      const bucketY = canvas.height - BUCKET_HEIGHT - CONTAINER_PADDING;
      
      // –†–∏—Å—É–µ–º –∫–æ–Ω—Ç—É—Ä –≤–µ–¥—Ä–∞
      ctx.strokeStyle = '#333';
      ctx.lineWidth = 2;
      ctx.beginPath();
      ctx.moveTo(bucketX, bucketY);
      ctx.lineTo(bucketX, bucketY + BUCKET_HEIGHT);
      ctx.lineTo(bucketX + BUCKET_WIDTH, bucketY + BUCKET_HEIGHT);
      ctx.lineTo(bucketX + BUCKET_WIDTH, bucketY);
      ctx.stroke();
      
      // –†–∏—Å—É–µ–º –¥–Ω–æ –≤–µ–¥—Ä–∞
      ctx.fillStyle = '#f5f5f5';
      ctx.fillRect(bucketX, bucketY + BUCKET_HEIGHT - 10, BUCKET_WIDTH, 10);
      
      // –†–∏—Å—É–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –≤–µ–¥—Ä–µ
      const tokensPerRow = Math.floor(BUCKET_WIDTH / (TOKEN_RADIUS * 2.5));
      const maxRows = Math.floor(BUCKET_HEIGHT / (TOKEN_RADIUS * 2.5));
      const maxVisibleTokens = tokensPerRow * maxRows;
      
      for (let i = 0; i < Math.min(tokens, maxVisibleTokens); i++) {
        const row = Math.floor(i / tokensPerRow);
        const col = i % tokensPerRow;
        
        const tokenX = bucketX + TOKEN_RADIUS * 2 + col * (TOKEN_RADIUS * 2.5);
        const tokenY = bucketY + BUCKET_HEIGHT - TOKEN_RADIUS * 2 - row * (TOKEN_RADIUS * 2.5);
        
        ctx.beginPath();
        ctx.arc(tokenX, tokenY, TOKEN_RADIUS, 0, Math.PI * 2);
        ctx.fillStyle = 'limegreen';
        ctx.fill();
        ctx.closePath();
      }
      
      // –†–∏—Å—É–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–∫–µ–Ω–æ–≤
      ctx.fillStyle = tokens === 0 ? 'red' : '#333';
      ctx.font = 'bold 16px Arial';
      ctx.textAlign = 'center';
      ctx.fillText(
        `${tokens} / ${rpsLimit} —Ç–æ–∫–µ–Ω–æ–≤`,
        canvas.width / 2,
        bucketY + BUCKET_HEIGHT + 30
      );
      
      // –†–∏—Å—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
      ctx.fillStyle = '#666';
      ctx.font = '14px Arial';
      ctx.fillText(
        `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: ${rpsLimit} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫`,
        canvas.width / 2,
        bucketY + BUCKET_HEIGHT + 50
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Ä–∏—Å—É–µ–º –ø–∞–¥–∞—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)
      setRefillTokens(prev => 
        prev
          .map(token => {
            // –§–∏–∑–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è
            let { x, y, velocity } = token;
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
            const absX = bucketX + x * BUCKET_WIDTH;
            
            // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç–∏–≥ –≤–µ—Ä—Ö–∞ –≤–µ–¥—Ä–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
            const bucketTopY = bucketY;
            
            if (y >= bucketTopY) {
              return null; // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –¥–æ—Å—Ç–∏–≥ –≤–µ–¥—Ä–∞
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é
            velocity += gravity;
            y += velocity;
            
            return { ...token, y, velocity };
          })
          .filter(Boolean) // –£–¥–∞–ª—è–µ–º null (—Ç–æ–∫–µ–Ω—ã, –¥–æ—Å—Ç–∏–≥—à–∏–µ –≤–µ–¥—Ä–∞)
      );
      
      // –†–∏—Å—É–µ–º –ø–∞–¥–∞—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã
      refillTokens.forEach(token => {
        const absX = bucketX + token.x * BUCKET_WIDTH;
        
        ctx.beginPath();
        ctx.arc(absX, token.y, TOKEN_RADIUS, 0, Math.PI * 2);
        ctx.fillStyle = 'limegreen';
        ctx.fill();
        ctx.closePath();
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Ä–∏—Å—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
      setRequests(prev => 
        prev
          .map(req => {
            // –§–∏–∑–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è
            let { x, y, velocity, accepted } = req;
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
            const absX = bucketX + x * BUCKET_WIDTH;
            
            // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –∏ –¥–æ—Å—Ç–∏–≥ –≤–µ—Ä—Ö–∞ –≤–µ–¥—Ä–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
            const bucketTopY = bucketY - BALL_RADIUS;
            
            if (accepted && y >= bucketTopY) {
              return null; // –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –ø—Ä–∏–Ω—è—Ç –∏ –¥–æ—Å—Ç–∏–≥ –≤–µ–¥—Ä–∞
            }
            
            // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ –¥–æ—Å—Ç–∏–≥ –≤–µ—Ä—Ö–∞ –≤–µ–¥—Ä–∞, –æ—Ç—Å–∫–∞–∫–∏–≤–∞–µ–º
            if (!accepted && y >= bucketTopY) {
              return { 
                ...req, 
                y: bucketTopY, 
                velocity: -velocity * 0.6 // –û—Ç—Å–∫–æ–∫ —Å –ø–æ—Ç–µ—Ä–µ–π —ç–Ω–µ—Ä–≥–∏–∏
              };
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é
            velocity += gravity;
            y += velocity;
            
            return { ...req, y, velocity };
          })
          .filter(Boolean) // –£–¥–∞–ª—è–µ–º null (–ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –¥–æ—Å—Ç–∏–≥—à–∏–µ –≤–µ–¥—Ä–∞)
          .filter(req => {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Å—Ç–∞—Ä—à–µ 3 —Å–µ–∫—É–Ω–¥)
            return now - req.created < 3000;
          })
      );
      
      // –†–∏—Å—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
      requests.forEach(req => {
        const absX = bucketX + req.x * BUCKET_WIDTH;
        
        ctx.beginPath();
        ctx.arc(absX, req.y, BALL_RADIUS, 0, Math.PI * 2);
        ctx.fillStyle = req.accepted ? 'limegreen' : 'tomato';
        ctx.fill();
        ctx.closePath();
      });
      
      animationFrameRef.current = requestAnimationFrame(animate);
    }
    
    animate();
    
    return () => {
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
      }
    };
  }, [requests, refillTokens, tokens, rpsLimit]);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ö–æ–ª—Å—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
  useEffect(() => {
    function handleResize() {
      if (canvasRef.current) {
        const canvas = canvasRef.current;
        const container = canvas.parentElement;
        canvas.width = container.clientWidth;
        canvas.height = 300;
      }
    }
    
    window.addEventListener('resize', handleResize);
    handleResize();
    
    return () => window.removeEventListener('resize', handleResize);
  }, []);
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
  useEffect(() => {
    setTokens(rpsLimit);
  }, [rpsLimit]);
  
  return (
    <div className="illustration">
      <h3 className="illustration__title">üéüÔ∏è Token Bucket</h3>
      <div className="illustration__canvas-container">
        <canvas ref={canvasRef} className="illustration__canvas" />
      </div>
      <p className="illustration__description">
        –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ç–æ–∫–µ–Ω–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–æ–ª–Ω—è—é—Ç—Å—è —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é. 
        –ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ—Ç, –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è.
      </p>
    </div>
  );
}
